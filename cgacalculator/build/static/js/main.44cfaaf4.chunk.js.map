{"version":3,"sources":["components/NavBar.js","screens/home.js","screens/cgpa.js","screens/sgpa.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","className","to","id","home","cgpa","type","name","list","value","onclick","sgpa","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4PAeeA,EAbA,WACX,OACI,6BACI,yBAAKC,UAAY,sBACb,kBAAC,IAAD,CAAMC,GAAI,KAAV,QACA,wBAAIC,GAAK,aAAaF,UAAY,SAClC,4BAAI,kBAAC,IAAD,CAAMC,GAAK,SAAX,WACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAK,SAAX,e,eCALE,EARF,WACT,OACI,yBAAKH,UAAU,QACX,+EACA,oGCcGI,EAlBF,WACT,OACI,yBAAKJ,UAAU,QACX,mDACA,2BAAOK,KAAK,OAAOC,KAAK,OAAOC,KAAK,UAChC,8BAAUL,GAAG,SACT,4BAAQM,MAAM,MACd,4BAAQA,MAAM,MACd,4BAAQA,MAAM,MACd,4BAAQA,MAAM,MACd,4BAAQA,MAAM,MACd,4BAAQA,MAAM,MACd,4BAAQA,MAAM,OAEtB,4BAAQR,UAAU,MAAMS,QAAQ,IAAhC,WCeGC,EA7BF,WACT,OACI,6BACI,yBAAKV,UAAU,qBACX,0CACA,2BAAOK,KAAK,OAAOC,KAAK,SAASC,KAAK,eACtC,8BAAUL,GAAG,cACT,4BAAQM,MAAM,QACd,4BAAQA,MAAM,QACd,4BAAQA,MAAM,QACd,4BAAQA,MAAM,UAElB,wCACA,2BAAOH,KAAK,OAAOC,KAAK,OAAOC,KAAK,UACpC,8BAAUL,GAAG,SACT,4BAAQM,MAAM,MACd,4BAAQA,MAAM,MACd,4BAAQA,MAAM,MACd,4BAAQA,MAAM,MACd,4BAAQA,MAAM,MACd,4BAAQA,MAAM,MACd,4BAAQA,MAAM,MACd,4BAAQA,MAAM,OAElB,4BAAQR,UAAU,OAAlB,YCRDW,MAVf,WACI,OACI,kBAAC,IAAD,KACA,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAO,KAApB,IAA0B,kBAAC,EAAD,MAA1B,KACA,kBAAC,IAAD,CAAOA,KAAO,SAAd,IAAwB,kBAAC,EAAD,MAAxB,KACA,kBAAC,IAAD,CAAOA,KAAO,SAAd,IAAuB,kBAAC,EAAD,MAAvB,OCDYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.44cfaaf4.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\nconst NavBar = () => {\r\n    return ( \r\n        <nav>\r\n            <div className = \"nav-wrapper  white\">\r\n                <Link to= \"/\">Home</Link>\r\n                <ul id = \"nav-mobile\" className = \"right\" >\r\n                <li><Link to = \"/cgpa\"> CGPA </Link></li>\r\n                <li><Link to = \"/sgpa\"> SGPA </Link></li>\r\n                </ul>  \r\n            </div > \r\n        </nav>\r\n    )\r\n}\r\nexport default NavBar;","import React from 'react'\r\nconst home = () => {\r\n    return ( \r\n        <div className=\"cls2\" >\r\n            <h3>I Welcome you to my first Web-Based Application</h3>\r\n            <h4>If you have any issues please comment the issues to yash@gmail.com</h4>\r\n        </div>\r\n    )\r\n}\r\nexport default home","import React from 'react'\r\nconst cgpa = () => {\r\n    return ( \r\n        <div className=\"cls1\">\r\n            <h5>Semesters Completed</h5>\r\n            <input type=\"text\" name=\"city\" list=\"name1\"/>\r\n                <datalist id=\"name1\">\r\n                    <option value=\"2\"></option>\r\n                    <option value=\"3\"></option>\r\n                    <option value=\"4\"></option>\r\n                    <option value=\"5\"></option>\r\n                    <option value=\"6\"></option>\r\n                    <option value=\"7\"></option>\r\n                    <option value=\"8\"></option>\r\n                </datalist>\r\n            <button className=\"bt1\" onclick=\"\">Enter</button>\r\n        </div>\r\n    )\r\n}\r\nexport default cgpa","import React from 'react'\r\nconst sgpa = () => {\r\n    return ( \r\n        <div>\r\n            <div className=\"cls1  input-field\">\r\n                <h5>Department</h5>\r\n                <input type=\"text\" name=\"course\" list=\"listcourse\"/>\r\n                <datalist id=\"listcourse\">\r\n                    <option value=\"CSE\"></option>\r\n                    <option value=\"ECE\"></option>\r\n                    <option value=\"EEE\"></option>\r\n                    <option value=\"MECH\"></option>\r\n                </datalist>\r\n                <h5>Semester</h5>\r\n                <input type=\"text\" name=\"city\" list=\"name1\"/>\r\n                <datalist id=\"name1\">\r\n                    <option value=\"1\"></option>\r\n                    <option value=\"2\"></option>\r\n                    <option value=\"3\"></option>\r\n                    <option value=\"4\"></option>\r\n                    <option value=\"5\"></option>\r\n                    <option value=\"6\"></option>\r\n                    <option value=\"7\"></option>\r\n                    <option value=\"8\"></option>\r\n                </datalist>\r\n                <button className=\"bt1\">Enter</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default sgpa","import React from 'react';\nimport NavBar from './components/NavBar'\nimport './App.css'\nimport { BrowserRouter, Route } from 'react-router-dom'\nimport Home from './screens/home'\nimport Cgpa from './screens/cgpa' \nimport Sgpa from './screens/sgpa'\nfunction App() {\n    return ( \n        <BrowserRouter>\n        <NavBar />\n        <Route exact path = '/' > <Home /> </Route> \n        <Route path = '/cgpa' > <Cgpa /> </Route> \n        <Route path = '/sgpa'> <Sgpa /> </Route> \n        </ BrowserRouter >\n    )\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}